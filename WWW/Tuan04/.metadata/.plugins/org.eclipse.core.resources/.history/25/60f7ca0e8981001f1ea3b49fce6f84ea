package daoImplement;

import java.util.ArrayList;
import java.util.List;

import dao.CartBeanDAO;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityTransaction;
import model.CartItemBean;
import model.Product;

public class CartBeanDAOIMPL implements CartBeanDAO{
	private EntityManager entityManager;
	public CartBeanDAOIMPL(EntityManager entityManager) {
		this.entityManager = entityManager;
	}
	@Override
	public void addCartItem(Product product, int quantity) {
		// TODO Auto-generated method stub
		 EntityTransaction transaction = entityManager.getTransaction();
	        try {
	            transaction.begin();
	            CartItemBean cartItem = new CartItemBean();
	            cartItem.setPartNumber(product.getId());
	            cartItem.setModelDescription(product.getModel());
	            cartItem.setUnitCost(product.getPrice());
	            cartItem.setQuantity(quantity);
	            cartItem.setTotalCost(product.getPrice() * quantity);
	            entityManager.persist(cartItem);
	            transaction.commit();
	        } catch (Exception e) {
	            if (transaction.isActive()) {
	                transaction.rollback();
	            }
	            e.printStackTrace();
	        }
	}
	@Override
	public List<CartItemBean> getCartItems() {
		// TODO Auto-generated method stub
		return entityManager.createQuery("SELECT c FROM CartItemBean c", CartItemBean.class).getResultList();
	}
	@Override
	public void deleteCartItem(String strItemIndex) {
		// TODO Auto-generated method stub
		 EntityTransaction transaction = entityManager.getTransaction();
	        try {
	            transaction.begin();
	            CartItemBean cartItem = entityManager.find(CartItemBean.class, Long.parseLong(strItemIndex));
	            if (cartItem != null) {
	                entityManager.remove(cartItem);
	            }
	            transaction.commit();
	        } catch (Exception e) {
	            if (transaction.isActive()) {
	                transaction.rollback();
	            }
	            e.printStackTrace();
	        }
	}
	@Override
	public void upateCartItem(String srtItemIndex, String strQuantity) {
		// TODO Auto-generated method stub
		EntityTransaction transaction = entityManager.getTransaction();
        try {
            transaction.begin();
            CartItemBean cartItem = entityManager.find(CartItemBean.class, Long.parseLong(srtItemIndex));
            if (cartItem != null) {
                cartItem.setQuantity(Integer.parseInt(strQuantity));
                cartItem.setTotalCost(cartItem.getUnitCost() * cartItem.getQuantity());
                entityManager.merge(cartItem);
            }
            transaction.commit();
        } catch (Exception e) {
            if (transaction.isActive()) {
                transaction.rollback();
            }
            e.printStackTrace();
        }
    
	}
	@Override
	public CartItemBean getCartItem(int iItemIndex) {
	    CartItemBean cartItem = null;
	    try {
	        cartItem = entityManager.find(CartItemBean.class, iItemIndex);
	    } catch (Exception e) {
	        e.printStackTrace(); // Log lỗi hoặc xử lý theo nhu cầu
	    }
	    return cartItem;
	}
	
	@Override
	public void addCartItem(CartItemBean cartItem) {
	    EntityTransaction transaction = null;
	    try {
	        // Bắt đầu giao dịch
	        transaction = entityManager.getTransaction();
	        transaction.begin();

	        // Thực hiện thêm mục giỏ hàng vào cơ sở dữ liệu
	        entityManager.persist(cartItem);

	        // Commit giao dịch
	        transaction.commit();
	    } catch (Exception e) {
	        if (transaction != null && transaction.isActive()) {
	            // Rollback giao dịch nếu có lỗi
	            transaction.rollback();
	        }
	        e.printStackTrace(); // Log lỗi hoặc xử lý thêm
	    }
	}
	
}
